Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement SEMI_COLON
Rule 2     program -> statement SEMI_COLON
Rule 3     statement -> conditional_statement
Rule 4     statement -> variable_declaration
Rule 5     statement -> assignment_statement
Rule 6     statement -> print_statement
Rule 7     variable_declaration -> IDENTIFIER COLON TYPE
Rule 8     assignment_statement -> IDENTIFIER ASSIGNMENT expression
Rule 9     conditional_statement -> IF OPEN_PAREN comparison CLOSE_PAREN COLON statement
Rule 10    expression -> term
Rule 11    expression -> term PLUS term
Rule 12    expression -> term MINUS term
Rule 13    term -> INTEGER
Rule 14    term -> DOUBLE
Rule 15    term -> IDENTIFIER
Rule 16    term -> STRING
Rule 17    print_statement -> OUTPUT expression
Rule 18    comparison -> expression LT expression
Rule 19    comparison -> expression GT expression
Rule 20    comparison -> expression EQ expression
Rule 21    comparison -> expression NEQ expression

Terminals, with rules where they appear

ASSIGNMENT           : 8
CLOSE_PAREN          : 9
COLON                : 7 9
DOUBLE               : 14
EQ                   : 20
GT                   : 19
IDENTIFIER           : 7 8 15
IF                   : 9
INTEGER              : 13
LT                   : 18
MINUS                : 12
NEQ                  : 21
OPEN_PAREN           : 9
OUTPUT               : 17
PLUS                 : 11
SEMI_COLON           : 1 2
STRING               : 16
TYPE                 : 7
error                : 

Nonterminals, with rules where they appear

assignment_statement : 5
comparison           : 9
conditional_statement : 3
expression           : 8 17 18 18 19 19 20 20 21 21
print_statement      : 6
program              : 1 0
statement            : 1 2 9
term                 : 10 11 11 12 12
variable_declaration : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement SEMI_COLON
    (2) program -> . statement SEMI_COLON
    (3) statement -> . conditional_statement
    (4) statement -> . variable_declaration
    (5) statement -> . assignment_statement
    (6) statement -> . print_statement
    (9) conditional_statement -> . IF OPEN_PAREN comparison CLOSE_PAREN COLON statement
    (7) variable_declaration -> . IDENTIFIER COLON TYPE
    (8) assignment_statement -> . IDENTIFIER ASSIGNMENT expression
    (17) print_statement -> . OUTPUT expression

    IF              shift and go to state 7
    IDENTIFIER      shift and go to state 8
    OUTPUT          shift and go to state 9

    program                        shift and go to state 1
    statement                      shift and go to state 2
    conditional_statement          shift and go to state 3
    variable_declaration           shift and go to state 4
    assignment_statement           shift and go to state 5
    print_statement                shift and go to state 6

state 1

    (0) S' -> program .
    (1) program -> program . statement SEMI_COLON
    (3) statement -> . conditional_statement
    (4) statement -> . variable_declaration
    (5) statement -> . assignment_statement
    (6) statement -> . print_statement
    (9) conditional_statement -> . IF OPEN_PAREN comparison CLOSE_PAREN COLON statement
    (7) variable_declaration -> . IDENTIFIER COLON TYPE
    (8) assignment_statement -> . IDENTIFIER ASSIGNMENT expression
    (17) print_statement -> . OUTPUT expression

    IF              shift and go to state 7
    IDENTIFIER      shift and go to state 8
    OUTPUT          shift and go to state 9

    statement                      shift and go to state 10
    conditional_statement          shift and go to state 3
    variable_declaration           shift and go to state 4
    assignment_statement           shift and go to state 5
    print_statement                shift and go to state 6

state 2

    (2) program -> statement . SEMI_COLON

    SEMI_COLON      shift and go to state 11


state 3

    (3) statement -> conditional_statement .

    SEMI_COLON      reduce using rule 3 (statement -> conditional_statement .)


state 4

    (4) statement -> variable_declaration .

    SEMI_COLON      reduce using rule 4 (statement -> variable_declaration .)


state 5

    (5) statement -> assignment_statement .

    SEMI_COLON      reduce using rule 5 (statement -> assignment_statement .)


state 6

    (6) statement -> print_statement .

    SEMI_COLON      reduce using rule 6 (statement -> print_statement .)


state 7

    (9) conditional_statement -> IF . OPEN_PAREN comparison CLOSE_PAREN COLON statement

    OPEN_PAREN      shift and go to state 12


state 8

    (7) variable_declaration -> IDENTIFIER . COLON TYPE
    (8) assignment_statement -> IDENTIFIER . ASSIGNMENT expression

    COLON           shift and go to state 13
    ASSIGNMENT      shift and go to state 14


state 9

    (17) print_statement -> OUTPUT . expression
    (10) expression -> . term
    (11) expression -> . term PLUS term
    (12) expression -> . term MINUS term
    (13) term -> . INTEGER
    (14) term -> . DOUBLE
    (15) term -> . IDENTIFIER
    (16) term -> . STRING

    INTEGER         shift and go to state 17
    DOUBLE          shift and go to state 18
    IDENTIFIER      shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 15
    term                           shift and go to state 16

state 10

    (1) program -> program statement . SEMI_COLON

    SEMI_COLON      shift and go to state 21


state 11

    (2) program -> statement SEMI_COLON .

    IF              reduce using rule 2 (program -> statement SEMI_COLON .)
    IDENTIFIER      reduce using rule 2 (program -> statement SEMI_COLON .)
    OUTPUT          reduce using rule 2 (program -> statement SEMI_COLON .)
    $end            reduce using rule 2 (program -> statement SEMI_COLON .)


state 12

    (9) conditional_statement -> IF OPEN_PAREN . comparison CLOSE_PAREN COLON statement
    (18) comparison -> . expression LT expression
    (19) comparison -> . expression GT expression
    (20) comparison -> . expression EQ expression
    (21) comparison -> . expression NEQ expression
    (10) expression -> . term
    (11) expression -> . term PLUS term
    (12) expression -> . term MINUS term
    (13) term -> . INTEGER
    (14) term -> . DOUBLE
    (15) term -> . IDENTIFIER
    (16) term -> . STRING

    INTEGER         shift and go to state 17
    DOUBLE          shift and go to state 18
    IDENTIFIER      shift and go to state 19
    STRING          shift and go to state 20

    comparison                     shift and go to state 22
    expression                     shift and go to state 23
    term                           shift and go to state 16

state 13

    (7) variable_declaration -> IDENTIFIER COLON . TYPE

    TYPE            shift and go to state 24


state 14

    (8) assignment_statement -> IDENTIFIER ASSIGNMENT . expression
    (10) expression -> . term
    (11) expression -> . term PLUS term
    (12) expression -> . term MINUS term
    (13) term -> . INTEGER
    (14) term -> . DOUBLE
    (15) term -> . IDENTIFIER
    (16) term -> . STRING

    INTEGER         shift and go to state 17
    DOUBLE          shift and go to state 18
    IDENTIFIER      shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 25
    term                           shift and go to state 16

state 15

    (17) print_statement -> OUTPUT expression .

    SEMI_COLON      reduce using rule 17 (print_statement -> OUTPUT expression .)


state 16

    (10) expression -> term .
    (11) expression -> term . PLUS term
    (12) expression -> term . MINUS term

    SEMI_COLON      reduce using rule 10 (expression -> term .)
    LT              reduce using rule 10 (expression -> term .)
    GT              reduce using rule 10 (expression -> term .)
    EQ              reduce using rule 10 (expression -> term .)
    NEQ             reduce using rule 10 (expression -> term .)
    CLOSE_PAREN     reduce using rule 10 (expression -> term .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 17

    (13) term -> INTEGER .

    PLUS            reduce using rule 13 (term -> INTEGER .)
    MINUS           reduce using rule 13 (term -> INTEGER .)
    SEMI_COLON      reduce using rule 13 (term -> INTEGER .)
    LT              reduce using rule 13 (term -> INTEGER .)
    GT              reduce using rule 13 (term -> INTEGER .)
    EQ              reduce using rule 13 (term -> INTEGER .)
    NEQ             reduce using rule 13 (term -> INTEGER .)
    CLOSE_PAREN     reduce using rule 13 (term -> INTEGER .)


state 18

    (14) term -> DOUBLE .

    PLUS            reduce using rule 14 (term -> DOUBLE .)
    MINUS           reduce using rule 14 (term -> DOUBLE .)
    SEMI_COLON      reduce using rule 14 (term -> DOUBLE .)
    LT              reduce using rule 14 (term -> DOUBLE .)
    GT              reduce using rule 14 (term -> DOUBLE .)
    EQ              reduce using rule 14 (term -> DOUBLE .)
    NEQ             reduce using rule 14 (term -> DOUBLE .)
    CLOSE_PAREN     reduce using rule 14 (term -> DOUBLE .)


state 19

    (15) term -> IDENTIFIER .

    PLUS            reduce using rule 15 (term -> IDENTIFIER .)
    MINUS           reduce using rule 15 (term -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 15 (term -> IDENTIFIER .)
    LT              reduce using rule 15 (term -> IDENTIFIER .)
    GT              reduce using rule 15 (term -> IDENTIFIER .)
    EQ              reduce using rule 15 (term -> IDENTIFIER .)
    NEQ             reduce using rule 15 (term -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 15 (term -> IDENTIFIER .)


state 20

    (16) term -> STRING .

    PLUS            reduce using rule 16 (term -> STRING .)
    MINUS           reduce using rule 16 (term -> STRING .)
    SEMI_COLON      reduce using rule 16 (term -> STRING .)
    LT              reduce using rule 16 (term -> STRING .)
    GT              reduce using rule 16 (term -> STRING .)
    EQ              reduce using rule 16 (term -> STRING .)
    NEQ             reduce using rule 16 (term -> STRING .)
    CLOSE_PAREN     reduce using rule 16 (term -> STRING .)


state 21

    (1) program -> program statement SEMI_COLON .

    IF              reduce using rule 1 (program -> program statement SEMI_COLON .)
    IDENTIFIER      reduce using rule 1 (program -> program statement SEMI_COLON .)
    OUTPUT          reduce using rule 1 (program -> program statement SEMI_COLON .)
    $end            reduce using rule 1 (program -> program statement SEMI_COLON .)


state 22

    (9) conditional_statement -> IF OPEN_PAREN comparison . CLOSE_PAREN COLON statement

    CLOSE_PAREN     shift and go to state 28


state 23

    (18) comparison -> expression . LT expression
    (19) comparison -> expression . GT expression
    (20) comparison -> expression . EQ expression
    (21) comparison -> expression . NEQ expression

    LT              shift and go to state 29
    GT              shift and go to state 30
    EQ              shift and go to state 31
    NEQ             shift and go to state 32


state 24

    (7) variable_declaration -> IDENTIFIER COLON TYPE .

    SEMI_COLON      reduce using rule 7 (variable_declaration -> IDENTIFIER COLON TYPE .)


state 25

    (8) assignment_statement -> IDENTIFIER ASSIGNMENT expression .

    SEMI_COLON      reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGNMENT expression .)


state 26

    (11) expression -> term PLUS . term
    (13) term -> . INTEGER
    (14) term -> . DOUBLE
    (15) term -> . IDENTIFIER
    (16) term -> . STRING

    INTEGER         shift and go to state 17
    DOUBLE          shift and go to state 18
    IDENTIFIER      shift and go to state 19
    STRING          shift and go to state 20

    term                           shift and go to state 33

state 27

    (12) expression -> term MINUS . term
    (13) term -> . INTEGER
    (14) term -> . DOUBLE
    (15) term -> . IDENTIFIER
    (16) term -> . STRING

    INTEGER         shift and go to state 17
    DOUBLE          shift and go to state 18
    IDENTIFIER      shift and go to state 19
    STRING          shift and go to state 20

    term                           shift and go to state 34

state 28

    (9) conditional_statement -> IF OPEN_PAREN comparison CLOSE_PAREN . COLON statement

    COLON           shift and go to state 35


state 29

    (18) comparison -> expression LT . expression
    (10) expression -> . term
    (11) expression -> . term PLUS term
    (12) expression -> . term MINUS term
    (13) term -> . INTEGER
    (14) term -> . DOUBLE
    (15) term -> . IDENTIFIER
    (16) term -> . STRING

    INTEGER         shift and go to state 17
    DOUBLE          shift and go to state 18
    IDENTIFIER      shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 36
    term                           shift and go to state 16

state 30

    (19) comparison -> expression GT . expression
    (10) expression -> . term
    (11) expression -> . term PLUS term
    (12) expression -> . term MINUS term
    (13) term -> . INTEGER
    (14) term -> . DOUBLE
    (15) term -> . IDENTIFIER
    (16) term -> . STRING

    INTEGER         shift and go to state 17
    DOUBLE          shift and go to state 18
    IDENTIFIER      shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 37
    term                           shift and go to state 16

state 31

    (20) comparison -> expression EQ . expression
    (10) expression -> . term
    (11) expression -> . term PLUS term
    (12) expression -> . term MINUS term
    (13) term -> . INTEGER
    (14) term -> . DOUBLE
    (15) term -> . IDENTIFIER
    (16) term -> . STRING

    INTEGER         shift and go to state 17
    DOUBLE          shift and go to state 18
    IDENTIFIER      shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 38
    term                           shift and go to state 16

state 32

    (21) comparison -> expression NEQ . expression
    (10) expression -> . term
    (11) expression -> . term PLUS term
    (12) expression -> . term MINUS term
    (13) term -> . INTEGER
    (14) term -> . DOUBLE
    (15) term -> . IDENTIFIER
    (16) term -> . STRING

    INTEGER         shift and go to state 17
    DOUBLE          shift and go to state 18
    IDENTIFIER      shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 39
    term                           shift and go to state 16

state 33

    (11) expression -> term PLUS term .

    SEMI_COLON      reduce using rule 11 (expression -> term PLUS term .)
    LT              reduce using rule 11 (expression -> term PLUS term .)
    GT              reduce using rule 11 (expression -> term PLUS term .)
    EQ              reduce using rule 11 (expression -> term PLUS term .)
    NEQ             reduce using rule 11 (expression -> term PLUS term .)
    CLOSE_PAREN     reduce using rule 11 (expression -> term PLUS term .)


state 34

    (12) expression -> term MINUS term .

    SEMI_COLON      reduce using rule 12 (expression -> term MINUS term .)
    LT              reduce using rule 12 (expression -> term MINUS term .)
    GT              reduce using rule 12 (expression -> term MINUS term .)
    EQ              reduce using rule 12 (expression -> term MINUS term .)
    NEQ             reduce using rule 12 (expression -> term MINUS term .)
    CLOSE_PAREN     reduce using rule 12 (expression -> term MINUS term .)


state 35

    (9) conditional_statement -> IF OPEN_PAREN comparison CLOSE_PAREN COLON . statement
    (3) statement -> . conditional_statement
    (4) statement -> . variable_declaration
    (5) statement -> . assignment_statement
    (6) statement -> . print_statement
    (9) conditional_statement -> . IF OPEN_PAREN comparison CLOSE_PAREN COLON statement
    (7) variable_declaration -> . IDENTIFIER COLON TYPE
    (8) assignment_statement -> . IDENTIFIER ASSIGNMENT expression
    (17) print_statement -> . OUTPUT expression

    IF              shift and go to state 7
    IDENTIFIER      shift and go to state 8
    OUTPUT          shift and go to state 9

    statement                      shift and go to state 40
    conditional_statement          shift and go to state 3
    variable_declaration           shift and go to state 4
    assignment_statement           shift and go to state 5
    print_statement                shift and go to state 6

state 36

    (18) comparison -> expression LT expression .

    CLOSE_PAREN     reduce using rule 18 (comparison -> expression LT expression .)


state 37

    (19) comparison -> expression GT expression .

    CLOSE_PAREN     reduce using rule 19 (comparison -> expression GT expression .)


state 38

    (20) comparison -> expression EQ expression .

    CLOSE_PAREN     reduce using rule 20 (comparison -> expression EQ expression .)


state 39

    (21) comparison -> expression NEQ expression .

    CLOSE_PAREN     reduce using rule 21 (comparison -> expression NEQ expression .)


state 40

    (9) conditional_statement -> IF OPEN_PAREN comparison CLOSE_PAREN COLON statement .

    SEMI_COLON      reduce using rule 9 (conditional_statement -> IF OPEN_PAREN comparison CLOSE_PAREN COLON statement .)

